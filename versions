#!/bin/zsh
###########################################
# Module Versions Checker: Compares locally installed versions with the remote (recent) version info
# by Soomin K.
###########################################
# ~/z/dev/logo
# ~/z/dev/update
C_R='\e[0;31m'
C_G='\e[0;32m'
C_B='\e[0;34m'
C_Y='\e[0;33m'
C_N='\e[0m'
# Following two variables will contain the version info and will be compared in showV()
# -------------------------------------------------
# VL: Version Local (locally installed)
# VR: Version Remote (from remote server)
# =================================================
# Set Module Info
# -------------------------------------------------
# argument $1: module name
# argument $2: L - local, R - remote, v - prefix to compare
# argument $3: remote module name (when it's different from the local)
setLR ()
{
  if [[ $1 == *"L"* ]]; then  # Local version info
    if [[ ! -z `command -v $2` ]]; then  # command exists
      VL=`$2 --version`
    else
      VL="${C_R}$2${C_G} NOT installed!${C_N}"
    fi
  else
    VL=""
  fi
  if [[ $1 == *"R"* ]]; then  # Remote version info
    if [ -z $3 ]; then
      VR=`npm show $2 version`
    else
      VR=`npm show $3 version`
    fi
  else
    VR=""
  fi
}
# =================================================
# Show Versions
# -------------------------------------------------
# argument $1: title with emoji
# argument $2: additional info
showV ()
{
  printf "${C_Y}$1${C_G}: "

  if [ -z "${VL}" ]; then    # If null: No installed version check, show shiny emoji before version info
    printf "${C_G}✨${VR}"
  else
    printf "${C_N}${VL}"
    if [ -z "${VR}" ]; then  # No remote version check
      printf "⚡️"
    else
      if [[ "${VL}" == *"${VR}"* ]]; then  # latest ver contained in installed?
        printf "✨"
      else
        printf "⚠️  ${C_G}${VR}${C_R}🌈"  # older or newer version installed
      fi
    fi
  fi

  if [ -z $2 ]; then   # No additional info provided
    print "${C_N}"
  else
    print " ${C_B}$2${C_N}"
  fi
}
# =================================================
# Header - show color scheme
HIST=~/z/update-hist.txt
if [ -f $HIST ]; then
  UD_Last=`tail -n 1 $HIST`  # print last one line
else
  UD_Last="${C_R}No Update Record${C_Y} -"
fi
print "${C_G}┌──────────┬───────────┬──────────┐ ${C_Y}${UD_Last} Last Update"
print "${C_G}│ ${C_Y}Versions${C_G} │ ${C_N}Installed${C_G} │ Latest✨ │ `date +'%T %m/%d/%Y'` Current"
print "${C_G}└──────────┴───────────┴──────────┘"
# =================================================
# Main -- Since it takes time to run each step, show immediately each result
setLR LR node node@lts
showV "🍏 node    " "${C_R}`npm show node@latest version`🌈 ${C_B}# nvm ls"
# -------------------------------------------------
setLR LR ts-node
showV "🍋 ts-node " "TypeScript execution and REPL for node.js"
# -------------------------------------------------
setLR LR npm
showV "🎁 npm     " "[`npm bin -g`]"
# -------------------------------------------------
setLR LR yarn
showV "🧵 yarn    " "[`yarn global bin`]"
# -------------------------------------------------
#setLR LR webpack
#showV "📦 webpack " "@next:${C_R}`npm show webpack@next version`"
# -------------------------------------------------
setLR LR electron
showV "💡 electron"
# -------------------------------------------------
setLR LR create-react-app
showV "🥐 CRA     " "# create-react-app"
# -------------------------------------------------
setLR R react
showV "🍙 react   "
# -------------------------------------------------
setLR R react-scripts
showV "🍣 scripts " "# react-scripts"
# -------------------------------------------------
setLR R react-redux
showV "🐤 redux   " "# react-redux"
# -------------------------------------------------
setLR R react-native
showV "📱 r-native" "# react-native"
# -------------------------------------------------
setLR R webpack
showV "🛍  webpack "
# -------------------------------------------------
setLR R rxjs
showV "🍡 RxJS    "
# -------------------------------------------------
setLR R babylonjs
showV "🧬 Babylon " "# babylonjs"
# -------------------------------------------------
setLR LR babel babel-cli
showV "🌮 babel   " "# babel-cli"
# -------------------------------------------------
setLR LR eslint
showV "🍬 eslint  "
# -------------------------------------------------
setLR LR tsc typescript
showV "🍭 tsc     " "# typescript"
# -------------------------------------------------
setLR LR sass
showV "🍒 sass    " "# yarn global add sass"
# -------------------------------------------------
setLR LR gatsby gatsby-cli
showV "💋 gatsby  " "# yarn global add gatsby gatsby-cli"
# -------------------------------------------------
setLR L ruby
showV "🔮 ruby    "
# -------------------------------------------------
setLR L python
showV "🐍 python  "
# -------------------------------------------------
setLR L pip3
showV "🐢 pip     " "# pip check"
# -------------------------------------------------
setLR L rustup
showV "💎 rustup  " "# rustup show"
# -------------------------------------------------
setLR L rustc
showV "⚙️  rustc   "
# -------------------------------------------------
setLR L cargo
showV "📦 cargo   "
# -------------------------------------------------
VL=`go version`
showV "👻 go      " "# https://golang.org/dl/"
# -------------------------------------------------
setLR L bazel
showV "🤖 bazel   " "# brew info bazel"
# -------------------------------------------------
VL=``
showV "🎯 dart    " "# brew upgrade dart"
dart --version
# -------------------------------------------------
setLR L flutter
showV "🐝 flutter " "# flutter upgrade"
# -------------------------------------------------
VL=`xcodebuild -version`
showV "🛠  xcode   " "# xcodebuild"
# -------------------------------------------------
setLR L swift
showV "🐦 swift   "
# -------------------------------------------------
VL=`kotlin -version`
showV "🦋 kotlin  " "# brew install kotlin"
# -------------------------------------------------
setLR L aws
showV "👾 aws CLI " "# brew install awscli; aws ec2 describe-instances; pip install -U aws-shell"
# -------------------------------------------------
setLR L sam
showV "😺 sam CLI " "# brew tap aws/tap; brew upgrade aws-sam-cli (Serverless Application Model)"
# -------------------------------------------------
setLR L gcloud
showV "🌩  GCP CLI " "# gcloud components update"
# -------------------------------------------------
setLR LR clasp @google/clasp
showV "🪐 clasp   " "# yarn global add @google/clasp (CL Apps Script)"
# -------------------------------------------------
setLR LR firebase firebase-tools
showV "🔥 firebase" "# yarn global add firebase-tools"
# -------------------------------------------------
setLR L docker
showV "🐳 docker  " "# https://hub.docker.com/"
# -------------------------------------------------
VL=`kubectl version --client`
showV "⛵ k8s     " "# kubernetes; brew install kubectl"
# -------------------------------------------------
VL=''
showV "☕️ java    "
java -version
# -------------------------------------------------
VL=`python -m site --user-site`
print "${C_Y}Python -m site --user-site: ${C_G}${VL}${C_N}"
python -m pip list | rg tensorflow
# End
